Index: src/Transicoes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.List;\r\n\r\npublic class Transicoes {\r\n\r\n    private List<Token> tokens; // Lista de tokens da entrada\r\n    private int indiceTokenAtual; // Índice do token atual\r\n\r\n    // Inicializa a lista de tokens ao começar o processamento de uma nova entrada\r\n    public void iniciarTokenizacao(String entrada) {\r\n        Token tokenizador = new Token(\"\", \"\");\r\n        this.tokens = tokenizador.tokenizar(entrada);\r\n        this.indiceTokenAtual = 0; // Reseta o índice para o primeiro token\r\n    }\r\n\r\n    // Retorna o próximo token da lista\r\n    private Token getProximoToken() {\r\n        if (indiceTokenAtual < tokens.size()) {\r\n            return tokens.get(indiceTokenAtual++);\r\n        } else {\r\n            return new Token(\"EOF\", \"\"); // Retorna um token especial de fim de arquivo\r\n        }\r\n    }\r\n\r\n    // Transição principal que chama 'processarExpressao' quando necessário\r\n    public Estado transitar(Estado estado, Token token) {\r\n        switch (estado) {\r\n            case q0:\r\n                if (token.getValor().equals(\"#\")) {\r\n                    return Estado.q1;\r\n                } else if (token.getValor().equals(\"int\") || token.getValor().equals(\"float\")) {\r\n                    return Estado.q3;\r\n                } else if (token.getValor().equals(\"print\")) {\r\n                    return processarComandoPrint(Estado.q8, token);\r\n                } else if (token.getValor().equals(\"if\")) {\r\n                    return Estado.q12; // Vai diretamente para o estado q12 para processar o bloco if\r\n                } else if (token.getValor().equals(\"while\")) {\r\n                    return processarBlocoWhile(token);\r\n                } else if (Character.isLetter(token.getValor().charAt(0))) {\r\n                    return Estado.q5;\r\n                } else if (token.getValor().equals(\"\\n\")) {\r\n                    return Estado.q0;\r\n                } else if (token.getTipo().equals(\"Comentário\")) {\r\n                    return Estado.q0;\r\n                } else {\r\n                    return Estado.qErro;\r\n                }\r\n\r\n            case q1: // Comentário\r\n                return Estado.q2;\r\n\r\n            case q3: // Declaração de variável\r\n                // Mantém o loop enquanto o token atual é um identificador de variável\r\n                while (Character.isLetter(token.getValor().charAt(0))) {\r\n                    token = getProximoToken();\r\n\r\n                    // Verifica se chegou ao fim da declaração (ponto e vírgula ou quebra de linha)\r\n                    if (token.getValor().equals(\";\") || token.getValor().equals(\"\\n\")) {\r\n                        return Estado.q0; // Finaliza a lista de variáveis\r\n                    }\r\n\r\n                    // Verifica se o próximo token não é um identificador válido\r\n                    else if (!Character.isLetterOrDigit(token.getValor().charAt(0))) {\r\n                        return Estado.qErro; // Se não for uma letra ou dígito, gera erro\r\n                    }\r\n                    logTokensProcessados(token);\r\n                }\r\n                break;\r\n\r\n            case q4: // Após identificar a variável\r\n                if (token.getValor().equals(\"=\")) {\r\n                    return Estado.q6; // Atribuição\r\n                } else if (token.getValor().equals(\"\\n\")) {\r\n                    return Estado.q0; // Declaração de variável sem atribuição\r\n                } else {\r\n                    return Estado.qErro; // Qualquer outro token gera erro\r\n                }\r\n\r\n            case q5: // Identificador de variável em expressão\r\n                if (token.getValor().equals(\"=\")) {\r\n                    return Estado.q6;\r\n                } else if (token.getTipo().equals(\"Operador\") || token.getTipo().equals(\"OperadorLogico\")\r\n                        || token.getTipo().equals(\"OperadorComparacao\")) {\r\n                    return Estado.q7;\r\n                } else if (token.getValor().equals(\";\") || token.getValor().equals(\"\\n\")) {\r\n                    return Estado.q0;\r\n                } else if (token.getValor().equals(\")\")) {\r\n                    return Estado.q14;\r\n                } else {\r\n                    return Estado.qErro;\r\n                }\r\n\r\n            case q6: // Após receber \"=\" (expressão de atribuição)\r\n                return Estado.q7;\r\n\r\n            case q7: // Expressão matemática ou lógica\r\n                if (token.getTipo().equals(\"Número\") || token.getTipo().equals(\"Identificador\")) {\r\n                    return Estado.q7;\r\n                } else if (token.getTipo().equals(\"Operador\") || token.getTipo().equals(\"OperadorLogico\")\r\n                        || token.getTipo().equals(\"OperadorComparacao\")) {\r\n                    return Estado.q7;\r\n                } else if (token.getValor().equals(\"\\n\")) {\r\n                    return Estado.q0;\r\n                }\r\n                break;\r\n\r\n            case q8: // Comando print\r\n                return processarComandoPrint(estado, token);\r\n\r\n            case q12: // Comando if\r\n                if (token.getValor().equals(\"(\")) {\r\n                    return Estado.q13;\r\n                }\r\n                break;\r\n\r\n            case q13: // Dentro da condição do if\r\n                return processarExpressaoAte(estado, token, \")\");\r\n\r\n            case q14: // Após a condição do if\r\n                if (token.getValor().equals(\"{\")) {\r\n                    return Estado.q15;\r\n                }\r\n                break;\r\n\r\n            case q15: // Bloco if\r\n                return processarExpressaoAte(estado, token, \"}\");\r\n\r\n            case q16: // Após fechamento do bloco if\r\n                if (token.getValor().equals(\"else\")) {\r\n                    return Estado.q17;\r\n                } else if (token.getValor().equals(\"\\n\")) {\r\n                    return Estado.q0;\r\n                }\r\n                break;\r\n\r\n            case q17: // Bloco else\r\n                if (token.getValor().equals(\"{\")) {\r\n                    return Estado.q18;\r\n                }\r\n                break;\r\n\r\n            case q18: // Instruções do bloco else\r\n                return processarExpressaoAte(estado, token, \"}\");\r\n\r\n            default:\r\n                return Estado.qErro;\r\n        }\r\n        return Estado.qErro;\r\n    }\r\n\r\n    // Função central que processa blocos de código, incluindo if, else e while\r\n    private Estado processarExpressao(Estado estadoAtual, Token token) {\r\n        Estado estadoInicial = estadoAtual;\r\n\r\n        while (true) {\r\n            if (token.getValor().equals(\"if\")) {\r\n                estadoAtual = processarBlocoIf(token);\r\n            } else if (token.getValor().equals(\"while\")) {\r\n                estadoAtual = processarBlocoWhile(token);\r\n            } else if (token.getValor().equals(\"else\")) {\r\n                estadoAtual = processarBlocoElse(token);\r\n            } else if (token.getValor().equals(\"{\")) {\r\n                estadoAtual = processarExpressao(estadoAtual, getProximoToken());\r\n            } else if (token.getValor().equals(\"}\")) {\r\n                return Estado.q0;\r\n            } else {\r\n                estadoAtual = transitar(estadoAtual, token);\r\n            }\r\n\r\n            if (estadoAtual == Estado.qErro) {\r\n                return Estado.qErro;\r\n            }\r\n            token = getProximoToken();\r\n        }\r\n    }\r\n\r\n    // Função auxiliar para processar bloco if\r\n    private Estado processarBlocoIf(Token token) {\r\n        Estado estadoAtual = Estado.q12;\r\n\r\n        if (token.getValor().equals(\"(\")) {\r\n            estadoAtual = processarExpressaoAte(estadoAtual, token, \")\");\r\n            if (estadoAtual != Estado.qErro) {\r\n                estadoAtual = processarExpressao(estadoAtual, getProximoToken());\r\n            }\r\n        }\r\n        return estadoAtual;\r\n    }\r\n\r\n    // Função auxiliar para processar bloco else\r\n    private Estado processarBlocoElse(Token token) {\r\n        Estado estadoAtual = Estado.q17;\r\n\r\n        if (token.getValor().equals(\"{\")) {\r\n            return processarExpressao(estadoAtual, getProximoToken());\r\n        }\r\n        return Estado.qErro;\r\n    }\r\n\r\n    // Função auxiliar para processar bloco while\r\n    private Estado processarBlocoWhile(Token token) {\r\n        Estado estadoAtual = Estado.q23;\r\n\r\n        if (token.getValor().equals(\"(\")) {\r\n            estadoAtual = processarExpressaoAte(estadoAtual, token, \")\");\r\n            if (estadoAtual != Estado.qErro) {\r\n                estadoAtual = processarExpressao(estadoAtual, getProximoToken());\r\n            }\r\n        }\r\n        return estadoAtual;\r\n    }\r\n\r\n    // Processa tokens até encontrar o delimitador específico\r\n    private Estado processarExpressaoAte(Estado estadoAtual, Token token, String delimitador) {\r\n        while (!token.getValor().equals(delimitador)) {\r\n            estadoAtual = transitar(estadoAtual, token);\r\n            if (estadoAtual == Estado.qErro) {\r\n                return Estado.qErro;\r\n            }\r\n            token = getProximoToken();\r\n        }\r\n        return estadoAtual;\r\n    }\r\n\r\n    // Processa o comando print\r\n    private Estado processarComandoPrint(Estado estadoInicial, Token token) {\r\n        Estado estadoAtual = estadoInicial;\r\n\r\n        if (token.getValor().equals(\"(\")) {\r\n            estadoAtual = Estado.q9;\r\n        } else if (Character.isLetter(token.getValor().charAt(0))) {\r\n            estadoAtual = Estado.q10;\r\n        }\r\n\r\n        while (estadoAtual != Estado.q11 && estadoAtual != Estado.qErro) {\r\n            estadoAtual = transitar(estadoAtual, token);\r\n            if (estadoAtual == Estado.q11)\r\n                break;\r\n        }\r\n\r\n        return estadoAtual == Estado.q11 ? Estado.q0 : Estado.qErro;\r\n    }\r\n\r\n    public boolean processar(String entrada) {\r\n        Estado estadoAtual = Estado.q0;\r\n        Estado[] estadosFinais = { Estado.q0 };\r\n\r\n        // Inicializa a tokenização para a entrada fornecida\r\n        iniciarTokenizacao(entrada);\r\n\r\n        while (indiceTokenAtual < tokens.size()) {\r\n            Token token = getProximoToken();\r\n\r\n            // Log para ver qual token está sendo processado\r\n            logTokensProcessados(token);\r\n\r\n            estadoAtual = transitar(estadoAtual, token);\r\n            if (estadoAtual == Estado.qErro)\r\n                return false;\r\n        }\r\n\r\n        // Verifica se terminou em estado final\r\n        for (Estado estadoFinal : estadosFinais) {\r\n            if (estadoAtual == estadoFinal)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void logTokensProcessados(Token token){\r\n        System.out.println(\"\\n=== Processando Token ===\");\r\n        System.out.println(\"Token: \" + token.getValor() + \", Tipo: \" + token.getTipo());\r\n        System.out.println(\"=========================\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Transicoes.java b/src/Transicoes.java
--- a/src/Transicoes.java	(revision f28413b8753baa7b14211fa94aba6043e5d36b00)
+++ b/src/Transicoes.java	(date 1730075362275)
@@ -30,7 +30,7 @@
                 } else if (token.getValor().equals("int") || token.getValor().equals("float")) {
                     return Estado.q3;
                 } else if (token.getValor().equals("print")) {
-                    return processarComandoPrint(Estado.q8, token);
+                    return Estado.q8; // Comando print
                 } else if (token.getValor().equals("if")) {
                     return Estado.q12; // Vai diretamente para o estado q12 para processar o bloco if
                 } else if (token.getValor().equals("while")) {
@@ -104,7 +104,29 @@
                 break;
 
             case q8: // Comando print
-                return processarComandoPrint(estado, token);
+                if (token.getValor().equals("(")) {
+                    return Estado.q9; // Parêntese de abertura
+                } else if (Character.isLetter(token.getValor().charAt(0))) {
+                    return Estado.q10; // Print sem parênteses
+                }
+                break;
+
+            case q9:
+                return Estado.q10; // Recebe a expressão a ser impressa
+
+            case q10:
+                if (token.getValor().equals(")")) {
+                    return Estado.q11; // Parêntese de fechamento
+                } else if (token.getValor().equals("\n")) {
+                    return Estado.q0; // Print sem parênteses, finalizado por quebra de linha
+                }
+                break;
+
+            case q11:
+                if (token.getValor().equals("\n")) {
+                    return Estado.q0; // Final do comando print
+                }
+                break;
 
             case q12: // Comando if
                 if (token.getValor().equals("(")) {
@@ -112,8 +134,23 @@
                 }
                 break;
 
-            case q13: // Dentro da condição do if
-                return processarExpressaoAte(estado, token, ")");
+            case q13: // Processamento da expressao matematica ou logica do if
+                if (token.getTipo().equals("Número") || token.getTipo().equals("Identificador")) {
+                    return Estado.q13; // Continua recebendo a expressão
+                } else if (token.getTipo().equals("Operador")) {
+                    return Estado.q13; // Continua para um operador matemático
+                } else if (token.getTipo().equals("OperadorLogico")) {
+                    return Estado.q13; // Continua para um operador lógico
+                } else if (token.getTipo().equals("OperadorComparacao")) {
+                    return Estado.q13; // Continua para um operador de comparação
+                } else if (token.getValor().equals("\n")) {
+                    return Estado.q13; // Possivel quebra de linha em bloco de instrução do if, deve continuar
+                                       // recebendo instruções
+                } else if (token.getValor().equals(")")) {
+                    return Estado.q14; // Fecha a condição e vai para o próximo estado
+                } else {
+                    return Estado.qErro; // Qualquer outro token fora da expressão gera erro
+                }
 
             case q14: // Após a condição do if
                 if (token.getValor().equals("{")) {
@@ -211,33 +248,91 @@
 
     // Processa tokens até encontrar o delimitador específico
     private Estado processarExpressaoAte(Estado estadoAtual, Token token, String delimitador) {
-        while (!token.getValor().equals(delimitador)) {
-            estadoAtual = transitar(estadoAtual, token);
-            if (estadoAtual == Estado.qErro) {
-                return Estado.qErro;
-            }
-            token = getProximoToken();
-        }
-        return estadoAtual;
-    }
-
-    // Processa o comando print
-    private Estado processarComandoPrint(Estado estadoInicial, Token token) {
-        Estado estadoAtual = estadoInicial;
-
-        if (token.getValor().equals("(")) {
-            estadoAtual = Estado.q9;
-        } else if (Character.isLetter(token.getValor().charAt(0))) {
-            estadoAtual = Estado.q10;
-        }
-
-        while (estadoAtual != Estado.q11 && estadoAtual != Estado.qErro) {
-            estadoAtual = transitar(estadoAtual, token);
-            if (estadoAtual == Estado.q11)
-                break;
-        }
+        while (token != null && !token.getValor().equals(delimitador)) {
+            // Implementa lógica específica de processamento aqui, sem chamar `transitar`
+            switch (estadoAtual) {
+                case q3:
+                    // Lógica de declaração de variável
+                    if (token.getTipo().equals("Identificador")) {
+                        estadoAtual = Estado.q3; // Mantém no estado de declaração de variável
+                    } else {
+                        return Estado.qErro; // Retorna erro se não for um identificador válido
+                    }
+                    break;
+
+                case q4:
+                    // Lógica para processar expressões matemáticas, lógicas, etc.
+                    // (Você pode adicionar condições específicas aqui)
+                    if (token.getTipo().equals("Operador") || token.getTipo().equals("Número")) {
+                        estadoAtual = Estado.q4; // Continua no estado de expressão
+                    } else {
+                        return Estado.qErro; // Retorna erro se o token não for válido
+                    }
+                    break;
+
+                    case q5: // Identificador de variável em expressão
+                    if (token.getValor().equals("=")) {
+                        return Estado.q6;
+                    } else if (token.getTipo().equals("Operador") || token.getTipo().equals("OperadorLogico")
+                            || token.getTipo().equals("OperadorComparacao")) {
+                        return Estado.q7;
+                    } else if (token.getValor().equals(";") || token.getValor().equals("\n")) {
+                        return Estado.q0;
+                    } else if (token.getValor().equals(")")) {
+                        return Estado.q14;
+                    } else {
+                        return Estado.qErro;
+                    }
+    
+                case q6: // Após receber "=" (expressão de atribuição)
+                    return Estado.q7;
+    
+                case q7: // Expressão matemática ou lógica
+                    if (token.getTipo().equals("Número") || token.getTipo().equals("Identificador")) {
+                        return Estado.q7;
+                    } else if (token.getTipo().equals("Operador") || token.getTipo().equals("OperadorLogico")
+                            || token.getTipo().equals("OperadorComparacao")) {
+                        return Estado.q7;
+                    } else if (token.getValor().equals("\n")) {
+                        return Estado.q0;
+                    }
+                    break;
+    
+                case q8: // Comando print
+                    if (token.getValor().equals("(")) {
+                        return Estado.q9; // Parêntese de abertura
+                    } else if (Character.isLetter(token.getValor().charAt(0))) {
+                        return Estado.q10; // Print sem parênteses
+                    }
+                    break;
+    
+                case q9:
+                    return Estado.q10; // Recebe a expressão a ser impressa
+    
+                case q10:
+                    if (token.getValor().equals(")")) {
+                        return Estado.q11; // Parêntese de fechamento
+                    } else if (token.getValor().equals("\n")) {
+                        return Estado.q0; // Print sem parênteses, finalizado por quebra de linha
+                    }
+                    break;
+                    
+                case q11:
+                    if (token.getValor().equals("\n")) {
+                        return Estado.q0; // Final do comando print
+                    }
+                    break;
+
+                default:
+                    return Estado.qErro; // Retorna erro para qualquer outro caso inesperado
+            }
 
-        return estadoAtual == Estado.q11 ? Estado.q0 : Estado.qErro;
+            // Obtém o próximo token para processar no loop
+            token = getProximoToken();
+        }
+
+        // Retorna o estado final após processar até o delimitador
+        return estadoAtual;
     }
 
     public boolean processar(String entrada) {
@@ -266,9 +361,10 @@
         return false;
     }
 
-    public void logTokensProcessados(Token token){
+    public void logTokensProcessados(Token token) {
+        
         System.out.println("\n=== Processando Token ===");
         System.out.println("Token: " + token.getValor() + ", Tipo: " + token.getTipo());
         System.out.println("=========================");
     }
-}
+}
\ No newline at end of file
